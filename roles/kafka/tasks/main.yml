---
- name: Create kafka group
  become: true
  ansible.builtin.group:
    name: '{{ kafka_group }}'
    state: present
    system: yes
  tags:
    - install
    - scale
  
- name: Create kafka user
  become: true
  ansible.builtin.user:
    name: '{{ kafka_user }}'
    group: '{{ kafka_group }}'
    state: present
    createhome: no
    system: yes
  tags:
    - install
    - scale

- name: Create kafka directory
  become: true
  ansible.builtin.file:
    path: "{{ kafka_installation_path }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user }}"
    mode: 0755
    recurse: true
  tags:
    - install
    - scale

- name: Check if Kafka tar file exists
  ansible.builtin.stat:
    path: "/tmp/kafka_{{ scala_version }}-{{ kafka_version }}.tgz"
  register: kafka_tar_file_stat
  tags:
    - install
    - scale

- name: Set Kafka tar file variable
  set_fact:
    kafka_tar_file:
      dest: "/tmp/kafka_{{ scala_version }}-{{ kafka_version }}.tgz"
  when: kafka_tar_file_stat.stat.exists
  tags:
    - install
    - scale

- name: Download Kafka tar file
  become: true
  ansible.builtin.get_url:
    url: "https://downloads.apache.org/kafka/{{ kafka_version }}/kafka_{{ scala_version }}-{{ kafka_version }}.tgz"
    dest: /tmp
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user }}"
    mode: 0755
  register: kafka_tar_file
  when: not kafka_tar_file_stat.stat.exists
  tags:
    - install
    - scale

- name: Set kafka_tar_file value when tar file not exists
  set_fact:
    kafka_tar_file: "{{ kafka_tar_file.dest }}"
  when: not kafka_tar_file_stat.stat.exists
  tags:
    - install
    - scale

- name: Set kafka_tar_file value when tar file exists
  set_fact:
    kafka_tar_file: "{{ kafka_tar_file_stat.stat.path }}"
  when: kafka_tar_file_stat.stat.exists
  tags:
    - install
    - scale

- name: Extract Kafka tar file
  become: true
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ kafka_tar_file }}"
    dest: "{{ kafka_installation_path }}"
    extra_opts:
      - --strip-components=1
    creates: "{{ kafka_installation_path }}/bin/kafka-storage.sh"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
  register: _extract
  tags:
    - install
    - scale

- name: Generate Kafka cluster ID
  ansible.builtin.shell: "{{ kafka_installation_path }}/bin/kafka-storage.sh random-uuid"
  register: result
  run_once: true
  tags:
    - install

- name: Set Kafka Cluster ID
  set_fact:
    kafka_cluster_id: "{{ result.stdout }}"
  tags:
    - install

- name: Generate kafka server.properties file
  become: true
  ansible.builtin.template:
    src: ../templates/kraft-server.j2
    dest: "{{ kafka_installation_path }}/config/kraft/server.properties"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_group }}"
    mode: 0755
    backup: true
  vars:
    all_ips_str: "{{ groups['all'] | map('extract', hostvars, ['ansible_host']) | join(',') }}"
    brokers_ip_str: "{{ groups['brokers'] | map('extract', hostvars, ['ansible_host']) | join(',') }}"
    controllers_ip_str: "{{ groups['controllers'] | map('extract', hostvars, ['ansible_host']) | join(',') }}"
    all_ips_list: "{{ all_ips_str.split(',') }}"
    all_brokers_list: "{{ brokers_ip_str.split(',') }}"
    all_controllers_list: "{{ controllers_ip_str.split(',') }}"
  tags:
    - install

- name: configuration | set log directory and cluster metadata
  import_tasks: configuration.yml
